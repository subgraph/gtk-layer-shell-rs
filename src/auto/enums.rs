// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use glib::translate::*;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GtkLayerShellEdge")]
pub enum Edge {
    #[doc(alias = "GTK_LAYER_SHELL_EDGE_LEFT")]
    Left,
    #[doc(alias = "GTK_LAYER_SHELL_EDGE_RIGHT")]
    Right,
    #[doc(alias = "GTK_LAYER_SHELL_EDGE_TOP")]
    Top,
    #[doc(alias = "GTK_LAYER_SHELL_EDGE_BOTTOM")]
    Bottom,
    #[doc(alias = "GTK_LAYER_SHELL_EDGE_ENTRY_NUMBER")]
    EntryNumber,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Edge {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Edge::{}",
            match *self {
                Self::Left => "Left",
                Self::Right => "Right",
                Self::Top => "Top",
                Self::Bottom => "Bottom",
                Self::EntryNumber => "EntryNumber",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for Edge {
    type GlibType = ffi::GtkLayerShellEdge;

    fn into_glib(self) -> ffi::GtkLayerShellEdge {
        match self {
            Self::Left => ffi::GTK_LAYER_SHELL_EDGE_LEFT,
            Self::Right => ffi::GTK_LAYER_SHELL_EDGE_RIGHT,
            Self::Top => ffi::GTK_LAYER_SHELL_EDGE_TOP,
            Self::Bottom => ffi::GTK_LAYER_SHELL_EDGE_BOTTOM,
            Self::EntryNumber => ffi::GTK_LAYER_SHELL_EDGE_ENTRY_NUMBER,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GtkLayerShellEdge> for Edge {
    unsafe fn from_glib(value: ffi::GtkLayerShellEdge) -> Self {
        skip_assert_initialized!();
        match value {
            0 => Self::Left,
            1 => Self::Right,
            2 => Self::Top,
            3 => Self::Bottom,
            4 => Self::EntryNumber,
            value => Self::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GtkLayerShellLayer")]
pub enum Layer {
    #[doc(alias = "GTK_LAYER_SHELL_LAYER_BACKGROUND")]
    Background,
    #[doc(alias = "GTK_LAYER_SHELL_LAYER_BOTTOM")]
    Bottom,
    #[doc(alias = "GTK_LAYER_SHELL_LAYER_TOP")]
    Top,
    #[doc(alias = "GTK_LAYER_SHELL_LAYER_OVERLAY")]
    Overlay,
    #[doc(alias = "GTK_LAYER_SHELL_LAYER_ENTRY_NUMBER")]
    EntryNumber,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Layer {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Layer::{}",
            match *self {
                Self::Background => "Background",
                Self::Bottom => "Bottom",
                Self::Top => "Top",
                Self::Overlay => "Overlay",
                Self::EntryNumber => "EntryNumber",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for Layer {
    type GlibType = ffi::GtkLayerShellLayer;

    fn into_glib(self) -> ffi::GtkLayerShellLayer {
        match self {
            Self::Background => ffi::GTK_LAYER_SHELL_LAYER_BACKGROUND,
            Self::Bottom => ffi::GTK_LAYER_SHELL_LAYER_BOTTOM,
            Self::Top => ffi::GTK_LAYER_SHELL_LAYER_TOP,
            Self::Overlay => ffi::GTK_LAYER_SHELL_LAYER_OVERLAY,
            Self::EntryNumber => ffi::GTK_LAYER_SHELL_LAYER_ENTRY_NUMBER,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GtkLayerShellLayer> for Layer {
    unsafe fn from_glib(value: ffi::GtkLayerShellLayer) -> Self {
        skip_assert_initialized!();
        match value {
            0 => Self::Background,
            1 => Self::Bottom,
            2 => Self::Top,
            3 => Self::Overlay,
            4 => Self::EntryNumber,
            value => Self::__Unknown(value),
        }
    }
}
